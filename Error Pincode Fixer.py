import pandas as pd
import os
import tkinter as tk
from tkinter import filedialog, messagebox
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter

# Geocoding Engine ‡§ö‡•Å‡§®‡•á‡§Ç (Nominatim/OpenStreetMap)
geolocator = Nominatim(user_agent="Pincode_Locator_Tool")
# Rate Limiter: API rate limits ‡§ï‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§∞‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
# Nominatim ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π 1.5 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§ï‡§æ ‡§¨‡•ç‡§∞‡•á‡§ï ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à ‡§§‡§æ‡§ï‡§ø Rate Limit ‡§ï‡•ç‡§∞‡•â‡§∏ ‡§® ‡§π‡•ã‡•§
geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1.5)

# ‡§Æ‡§æ‡§®‡•ç‡§Ø Pincode ‡§ï‡•â‡§≤‡§Æ ‡§®‡§æ‡§Æ
# 'Postal Code' ‡§ï‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§´‡§æ‡§á‡§≤ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ ‡§π‡•à
PINCODE_COLUMNS = ['Postal Code', 'Pincode', 'PostalCod', 'PostalCode', 'ZIP'] 

def get_lat_long_from_pincode(pincode):
    """‡§¶‡§ø‡§è ‡§ó‡§è Pincode ‡§ï‡•á ‡§≤‡§ø‡§è Latitude ‡§î‡§∞ Longitude ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    # Invalid Pincode types ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç
    try:
        # Pincode ‡§ï‡•ã string ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•á‡§Ç (‡§ú‡•à‡§∏‡•á 795001)
        pincode_str = str(int(pincode))
    except (ValueError, TypeError):
        return None, None # Invalid Pincode ‡§π‡•ã‡§®‡•á ‡§™‡§∞ None return ‡§ï‡§∞‡•á‡§Ç
        
    try:
        # Pincode ‡§ï‡•á ‡§∏‡§æ‡§• 'India' ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
        location = geocode(f"{pincode_str}, India")
        if location:
            return location.latitude, location.longitude
        else:
            return None, None
    except Exception:
        # Rate limit ‡§Ø‡§æ connection error ‡§ï‡•ã ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡•á‡§Ç
        return None, None

def bulk_geocoder_logic(input_file_path):
    """‡§´‡§æ‡§á‡§≤ ‡§ï‡•ã ‡§≤‡•ã‡§° ‡§î‡§∞ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§"""
    
    # 1. ‡§á‡§®‡§™‡•Å‡§ü ‡§´‡§º‡§æ‡§á‡§≤ ‡§™‡§¢‡§º‡•á‡§Ç
    if input_file_path.endswith('.csv'):
        df = pd.read_csv(input_file_path)
    elif input_file_path.endswith(('.xls', '.xlsx')):
        df = pd.read_excel(input_file_path)
    else:
        return False, "Invalid file format. Please use CSV or Excel."

    # Pincode ‡§ï‡•â‡§≤‡§Æ ‡§ï‡§æ ‡§∏‡§π‡•Ä ‡§®‡§æ‡§Æ ‡§ñ‡•ã‡§ú‡•á‡§Ç
    pincode_col = next((col for col in df.columns if col in PINCODE_COLUMNS), None)

    # ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§ï‡§ø Pincode ‡§ï‡•â‡§≤‡§Æ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à
    if not pincode_col:
        return False, f"Error: The input file must have one of these columns: {', '.join(PINCODE_COLUMNS)}."

    # 2. Geocoding ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§™‡•â‡§™‡§Ö‡§™ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
    messagebox.showinfo(
        "Processing Start", 
        f"Processing {len(df)} entries from column '{pincode_col}'.\n\n"
        "This will take approx. 1.5 seconds per Pincode due to API rate limits. Please wait, the tool will notify you when finished."
    )

    # 3. Geocoding ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§∞‡•á‡§Ç
    results = df[pincode_col].apply(lambda x: get_lat_long_from_pincode(x))

    # 4. Lat/Long ‡§ï‡•ã DataFrame ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    df['Latitude'] = [r[0] for r in results]
    df['Longitude'] = [r[1] for r in results]

    # 5. ‡§Ü‡§â‡§ü‡§™‡•Å‡§ü ‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç
    base, ext = os.path.splitext(input_file_path)
    # Output ‡§π‡§Æ‡•á‡§∂‡§æ CSV ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§ó‡§æ
    output_file_path = f"{base}_LatLong_Output.csv"
    
    df.to_csv(output_file_path, index=False)
    
    return True, output_file_path

def open_file_dialog():
    """GUI ‡§´‡§æ‡§á‡§≤ ‡§∏‡•á‡§≤‡•á‡§ï‡•ç‡§∂‡§® ‡§µ‡§ø‡§Ç‡§°‡•ã ‡§ñ‡•ã‡§≤‡§§‡§æ ‡§π‡•à‡•§"""
    # Root ‡§µ‡§ø‡§Ç‡§°‡•ã ‡§õ‡•Å‡§™‡§æ‡§è‡§Å
    root = tk.Tk()
    root.withdraw()

    # ‡§´‡§æ‡§á‡§≤ ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§°‡§æ‡§Ø‡§≤‡•â‡§ó ‡§ñ‡•ã‡§≤‡•á‡§Ç
    file_path = filedialog.askopenfilename(
        title="Select your Pincode File (CSV or Excel)",
        filetypes=(("CSV/Excel files", "*.csv *.xlsx *.xls"), ("All files", "*.*"))
    )

    if file_path:
        # Geocoding ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç
        success, result_info = bulk_geocoder_logic(file_path)
        
        if success:
            messagebox.showinfo("Success üéâ", f"Geocoding complete!\nResults saved to:\n{result_info}")
        else:
            messagebox.showerror("Error ‚ùå", result_info)
    else:
        messagebox.showinfo("Cancelled", "File selection cancelled.")

# --- ‡§ï‡•ã‡§° ‡§ö‡§≤‡§æ‡§è‡§Ç ---
if __name__ == "__main__":
    open_file_dialog()
